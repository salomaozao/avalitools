---
title: "Relatório Estatístico"
subtitle: "Relatório estatístico do Model de regressão linear."
tbl-colwidths: false
format: 
  docx:
   reference-doc: custom-reference-doc.docx
   fig-width: 5.2125984252
   fig-height: 3.1220472441
   fig-dpi: 300
   number-sections: True


---

```{r include = F}

#installing and loading required packages

if(!require("pacman", quietly = T)){
  install.packages("pacman")
}

pacman::p_load(dplyr, ggplot2, ppcor, avalitools, conflicted, knitr)

#resolving possible conflict issues
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")

```

```{r echo = F}
# Loads research
Research <- read_avaliation(path = "pesquisa_curvelo.xlsx")


# Assigns the search objects to data.frames
Vars_df <- Research$vari
ObservedData_df <- Research$dados
ResearchInfos_df <- Research$info
State_df <- Research$imo
RawObservedData_df <- Research$inicial


# Assigns a vector of characters that represent the transformations
# aplied in the variables
VarsTransf <- Research$transf
Index <- Research$indices
Index <- Index$i

# Aplies the given transformatios in the ObservedData_df
TransformedData_df <- apply_transf(df = ObservedData_df, trans = VarsTransf)

# Fits the linear regression model to the TransformedData_df 
Model <- lm_avalitools(TransformedData_df)

# Assingns the objects of the Model object to diferent variables
ModelReg <- Model$modelo
ModelAnova <- Model$anova

# Summarise the Regression model and atach to a variable
SummaryReg <- summary(ModelReg)


```

## Informações Básicas

```{r echo = F}
# Reorganizes the table and attributes to a data.frame
ResearchInfos_df<- cbind(colnames(ResearchInfos_df), unlist(ResearchInfos_df))

cat_df(ResearchInfos_df)

```

## Informações Complementares

```{r echo = F}
#Number of observed Data
DataObs_num <- nrow(RawObservedData_df)
#Number of observed Data
DataActive_num <- nrow(ObservedData_df)


# Names for the variables 
NumericVars_names <- Vars_df %>%
  filter(Tipo == "Numérica") %>%
  select(Nome)

NumericVars_names <- NumericVars_names$Nome

NumericEnableVars_names <- Vars_df %>%
  filter(Tipo == "Numérica" & Habilitada == "Sim") %>%
  select(Nome)

NumericEnableVars_names <- NumericEnableVars_names$Nome

CharacterVars_names <- Vars_df %>%
  filter(Tipo == "Texto")

CharacterVars_names <- CharacterVars_names$Nome

#Number of Vars
NumericVars_num <- length(NumericVars_names)
#Number of Numeric Enabled Vars
NumericEnableVars_num <- length(NumericEnableVars_names)

# Labels for additional information

ResearchCompInfos_df <- complementary_info(
  num_v = NumericVars_num,
  num_vu = NumericEnableVars_num,
  num_d = DataObs_num,
  num_du = DataActive_num
)

# Prints the additional information about the Data
cat_df(
  ResearchCompInfos_df,
  colnames = c("Variáveis e dados do Model", "Quant.")
)
```

## Descrição das Variáveis

```{r echo = F}
# Print the Variables table 
cat_df(Vars_df, colnames(Vars_df))

```

## Estatísticas Descritivas

```{r echo = F}
# Create and print a description for each use variable in the model


DescrStats_df <- descr_avalitools(ObservedData_df)


cat_df(DescrStats_df, colnames = colnames(DescrStats_df), rownames = NumericEnableVars_names)

```

## Coeficiente de correlação, determinação e estatística F:

```{r echo = F, warning=FALSE}
# Create and print a summary for the Regression model

SummaryReg_df <- summary_avalitools(ModelReg)
cat_df(SummaryReg_df, colnames = colnames(SummaryReg_df))
```

## Normalidade dos resíduos

```{r echo = F}
# Create and print a table about the Normality assumption 

Normality_df <- normality_table(ModelReg) 
cat_df(Normality_df, c("Distribuição dos resíduos", "Curva Normal", "Model"))
```

## Outliers do Model de Regressão:

```{r echo = F}
# Create and print a table about the Outliers of the Regression Model

Outliers_df <- outliers_table(ModelReg)
cat_df(Outliers_df) # !
```

## Análise de Variância:

```{r echo = F}
# Create and print a table for the Anova test

Anova_df <- as_avaliation_anova(ModelAnova)
cat_df(Anova_df, colnames = colnames(Anova_df)) # !
```

## Equação de Regressão

```{r echo = F}
RegEquation_df <- data.frame(
  x = regression_equation(ModelReg, NumericEnableVars_names, VarsTransf)
)
cat_df(RegEquation_df)
```


## Funções Estimativa

```{r echo = F}
# Create an vector of the 3 equations for the parameters of interest


EstimateEquation <- estimate_equations(ModelReg, NumericEnableVars_names, VarsTransf)
if (length(EstimateEquation) != 3) {
  EstimateEquation <- rep(EstimateEquation, 3)
}
```

### Função Estimativa (Moda)

```{r echo = F}
cat_df(data.frame(EstimateEquation[1]))
```

### Função Estimativa (Mediana)

```{r echo = F}
cat_df(data.frame(EstimateEquation[2]))
```

### Função Estimativa (Média)

```{r echo = F}
cat_df(data.frame(EstimateEquation[3]))
```


## Teste de Hipóteses (significância dos regressores)

```{r echo = F}
# Create and print a table of tests for significance of the model variables

SignfTtests_df <- ttests_table(ModelReg, NumericEnableVars_names)
cat_df(SignfTtests_df, colnames = colnames(SignfTtests_df))
```

## Correlações Parciais Isoladas

```{r echo = F}
# Create and print a isolate partial correlations matrix

Corr_matrix <- cor_avalitools(TransformedData_df, NumericEnableVars_names)
cat_df(Corr_matrix, colnames = colnames(Corr_matrix))
```

## Correlações Parciais Influência

```{r echo = F}
# Create and print a influenced partial correlations matrix

CorrInf_matrix <- cor_avalitools(
  TransformedData_df,
  NumericEnableVars_names,
  inf = TRUE
)
cat_df(
  CorrInf_matrix,
  colnames = colnames(CorrInf_matrix)
)
```

## Tabela de Resíduos

```{r echo = F, warning=FALSE}
# Create and print measures for residuals assumption verification

Residuals_df <- residuals_table(ModelReg, TransformedData_df, Index)
cat_df(Residuals_df, colnames = colnames(Residuals_df))
```

## Gráficos de Aderência e de resíduos da regressão:

### Aderência Observado x Estimado - Regressão Linear na forma direta

```{r echo = F, warning=FALSE}


RespInverseFun <- inverse_function(
  fun = VarsTransf[length(VarsTransf)]
)

ObsAndEstimate_df <- data.frame(
  v1 = ObservedData_df[[NumericEnableVars_num]],
  v2 = RespInverseFun(ModelReg$fitted.values)
)


# Create a Regression model to estimate a line that represents
#  the linear relation between the estimates and observations
SecundaryModelReg <- lm(v2 ~ v1, data = ObsAndEstimate_df)

SecunRegCoef <- SecundaryModelReg$coefficients

ggplot(data = ObsAndEstimate_df) +
  geom_point(aes(x = v1, y = v2), color = "blue", fill = "white") +
  geom_abline(col = "yellow") +
  geom_abline(
    aes(slope = SecunRegCoef[2], intercept = SecunRegCoef[1]),
    col = "red"
  ) +
  labs(x = "Observado", y = "Estimado") +
  scale_y_continuous(
    labels = scales::number_format(big.mark = ".", accuracy = 1)
  ) +
  scale_x_continuous(
    labels = scales::number_format(big.mark = ".", accuracy = 1)
  ) +
  theme_bw()
```

### Resíduos da regressão linear

```{r echo = F, warning=FALSE}
SigmaEstimate <- qme(ModelReg)


EstimateAndResiduals_df <- data.frame(
  # !
  est = ModelReg$fitted.values,
  res = ModelReg$residuals / SigmaEstimate
) %>%
  mutate(out = ifelse(res >= 2 | res <= -2, "Outlier", "Não outlier"))


ggplot(EstimateAndResiduals_df) +
  geom_point(
    aes(x = est, y = res, fill = out),
    col = "blue4",
    stroke = 0.84,
    shape = 21,
    show.legend = F
  ) +
  geom_abline(aes(intercept = 0, slope = 0), col = "blue") +
  geom_abline(aes(intercept = 2, slope = 0), col = "red") +
  geom_abline(aes(intercept = -2, slope = 0), col = "red") +
  labs(y = "Residuos/DP", x = "Valores Estimados") +
  scale_y_continuous(limits = c(-3.5, 3.5), n.breaks = 12) +
  scale_x_continuous(
    labels = scales::number_format(big.mark = ".", accuracy = 1)
  ) +
  scale_fill_manual(values = c("blue", "red")) +
  theme_bw()

```

## Gráficos de elasticidade da função no ponto médio

```{r echo = F, warning=FALSE}
ElasticityPlots_list <- elasticity_plots(
  # !
  modelo = ModelReg,
  df = ObservedData_df,
  trans = VarsTransf,
  NumericEnableVars_names
)

for (i in 1:(ncol(ObservedData_df) - 1)) {
  print(ElasticityPlots_list[[i]])
}

class(SummaryReg_df)
```

## Tabela de Dados - Amostra:

### Variáveis Texto

```{r echo = F}
CharacterVars_df <- RawObservedData_df %>% select(all_of(CharacterVars_names))

cat_df(CharacterVars_df, colnames(CharacterVars_df))
```


### Variáveis Numéricas

```{r echo = F}
NumericVars_df <- RawObservedData_df %>% select(all_of(NumericVars_names))

cat_df(NumericVars_df, colnames(NumericVars_df))
```



## Estimativa de Valores

```{r echo = F}
StateData_df <- State_df %>%
  filter(!is.na(Conteudo) | !is.numeric(Conteudo))

StateData<- StateData_df$Conteudo

StateData <- matrix(StateData, nrow = 1, ncol = length(StateData))

StateData <- as.data.frame(StateData)

colnames(StateData) <- paste("x", 1:ncol(StateData), sep = "")


Estimate_df <- predict_avalitools(
  df_novo = StateData,
  modelo = ModelReg,
  trans = VarsTransf
)


cat_df(Estimate_df, colnames = colnames(Estimate_df)) # !

```

## Dados do imóvel avaliando:

```{r echo = F}

IndependentVars <- Vars_df %>%
  filter(Vars_df[[3]] != "Dependente")
IndependentVars <- IndependentVars$Nome

StateObs_df <- avali_table( State_df, RawObservedData_df[,IndependentVars] ) 

cat_df(StateObs_df, colnames = c("Variável", "Contúdo", "Extrapolação"))

```



```{r}
Vars_df <- Research$vari
ObservedData_df <- Research$dados
ResearchInfos_df <- Research$info
State_df <- Research$imo
RawObservedData_df <- Research$inicial


#=====  DA Research

cat_df(Vars_df, colnames(Vars_df))
NumericEnableVars_names <- Vars_df %>%
  filter(Tipo == "Numérica" & Habilitada == "Sim") %>%
  select(Nome)

# Tabela de números de variáveis
cat_df(DescrStats_df, colnames = colnames(DescrStats_df), rownames = NumericEnableVars_names) # Tabela de variáveis 


DescrStats_df <- descr_avalitools(ObservedData_df) # !
cat_df(DescrStats_df, colnames = colnames(DescrStats_df), rownames = NumericEnableVars_names)

ResearchInfos_df_basicas <- cbind(colnames(ResearchInfos_df), unlist(ResearchInfos_df))

cat_df(ResearchInfos_df_basicas)

#=====  DO Model
Model <- lm_avalitools(TransformedData_df)

# Atribui a dois objetos distintos os Models
ModelReg <- Model$Model
ModelAnova <- Model$anova

# cria um resumo para o Model de regressão linear
SummaryReg <- summary(ModelReg)

SummaryReg_df <- summary_avalitools(ModelReg)
cat_df(SummaryReg_df, colnames = colnames(SummaryReg_df)) # !

cat_df(
  normality_table(ModelReg),
  c("Distribuição dos resíduos", "Curva Normal", "Model")
)

cat_df(outliers_table(ModelReg))

cat_df(as_avaliation_anova(ModelAnova), colnames = colnames(Anova_df)) # !

regretionEq_df <- data.frame(
  x = regression_equation(ModelReg, NumericEnableVars_names, VarsTransf)
)
cat_df(regretionEq_df)


SummaryReg_df <- summary_avalitools(ModelReg)
cat_df(SummaryReg_df, colnames = colnames(SummaryReg_df)) # SecunRegCoef de reg

#=====  DA ESTIMATIVA

EstimateEquation <- estimate_equations(ModelReg, NumericEnableVars_names, VarsTransf)


#===== COMPLEMENTARES

ResearchInfos_df_complementares <- complementary_info(
  num_v = NumericVars_names,
  num_vu = NumericEnableVars_names,
  num_d = DataObs_num,
  num_du = DataActive_num
)

# !
cat_df(
  ResearchInfos_df_complementares,
  colnames = c("Variáveis e dados do Model", "Quant.")
)
#=====

#=====
#=====
#=====
```
